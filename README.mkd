Resolv Module for Puppet
========================

[![Build Status](https://secure.travis-ci.org/vrillusions/puppet-resolv.png)](http://travis-ci.org/vrillusions/puppet-resolv) [![Project Status](http://stillmaintained.com/vrillusions/puppet-resolv.png)](http://stillmaintained.com/vrillusions/puppet-resolv)

This is a module that manages the `/etc/resolv.conf` file.  It's basic but I found myself mentioning it often in IRC when referencing how some features in Puppet v3 work.

Updated Documentation on Puppet Labs
------------------------------------

Puppet Labs has a more complete example of using hiera.  This is available at [http://docs.puppetlabs.com/hiera/1/complete_example.html](http://docs.puppetlabs.com/hiera/1/complete_example.html).

This Projoect is Abandoned
--------------------------

This was initially intended to be used as a demonstration of hiera's capabilities. There are now better resources from more official sources so don't expect much to happen here.

License
-------

It's licensed under [Creative Commons CC0](http://creativecommons.org/publicdomain/zero/1.0/) and is free to be used however you want.

Hiera
-----

One of the features this module takes advantage of is the automatic loading of data from Hiera.  To use this create a file called `/etc/puppet/hiera.yaml` with the following code

    ---
    :backends:
      - yaml
    
    :yaml:
      :datadir: /etc/puppet/hieradata
    
    :hierarchy:
      - %{fqdn}
      - common

This a very basic hierarchy that will first try the fqdn of the host and then a common file.  Now create the file (making the directory if need be) `/etc/puppet/hieradata/common.yaml` with the following content:

    ---
    # Common Values
    resolv::search: example.com
    resolv::nameservers:
      - 208.67.222.222
      - 208.67.220.220

Restart puppet master (if you are running through passenger and apache/nginx then restart that).  The way Puppet v3 looks up a variable is it first goes off the class definition when called.  So `class {'resolv': search => 'example.net' }` would be found first.  Next it checks hiera.  The way it determines the name is (class name)::(variable name).  Thus in this case it's `resolv::search`.  If you had a subclass called config it would then lookup `resolv::config::search`.  If it does not find it at full class name and variable name it gives up.  Third and finally it uses the value inside the class.  If there is no value specified then it will throw a compile error.

Closing Thoughts
----------------

This is a simple example as the hiera documentation that's built in to Puppet v3 is very much lacking (as of December 2012).  Keep checking [PuppetLabs Documentation](http://docs.puppetlabs.com/) for more up to date information.  Also a good source of help is #puppet on freenode irc network.

In this example I'm placing hieradata in a subfolder of /etc. In real world use you should maintain two different repositories.  One of your `/etc/puppet` directory that has your modules and none or very little personal data in it.  Then create another for your personal data and private modules.  This makes it easier to contribute to the puppet community and when done properly allows you to make your puppet modules public while keeping sensitive information out of it.  Also remember that you can override what's in common by making a `host.fqdn.com.yaml` file.  So if you have a couple servers that talk to an internal dns server you can specify it there.
